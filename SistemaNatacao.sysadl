Model SysADLModel ; 
package SysADL.types { 
	value type Int { } 
	value type Boolean { } 
	value type String { } 
	value type Void { } 
	value type Real { }
dimension Time unit Millisecond { dimension = Time } value type LapTime { unit = Millisecond dimension = Time } enum AuthenticationMethod { QRCode , Manual } enum SensorStatus { Active , Inactive } enum EventType { Started , Finished } datatype AuthCredentials { attributes : method : AuthenticationMethod ; ^value : String ; } datatype AthleteInfo { attributes :  id : String ; name : String ; } datatype TrainingDetails { attributes : athleteId : String ; trainingId : String ; trainingName : String ; laneId : String ; } datatype SensorEvent { attributes : sensorId : String ; eventType : String ; timestamp : Real ; laneId : String ; } enum TrainingAction { Login , SelectTraining , SelectLane , StartTraining , EndTraining } datatype ExerciseRecord { attributes : athleteId : String ; trainingId : String ; exerciseNumber : Int ; laneId : String ; startTime : Real ; endTime : Real ; duration : LapTime ; } datatype RealtimeDisplayData { attributes : athleteName : String ; lapTime : LapTime ; laneId : String ; overallRank : Int ; } datatype VideoFeedData { attributes : cameraId : String ; timestamp : Real ; videoSegment : String ; laneId : String ; } datatype TrainingSessionLog { attributes : sessionId : String ; athleteInfo : AthleteInfo ; trainingDetails : TrainingDetails ; sessionStartTime : Real ; sessionEndTime : Real ; exerciseRecords : ExerciseRecord ; videoReferences : VideoFeedData ; } } Requirement SMSRequirements ( 0 ) { text = "The System must satisfy both Functional and Non-Functional Requirements" } Requirement SMSNonFunctionalrequirements ( 2 ) { text = "" } Requirement UserManagementFR ( 1.1 ) { text = "User CRUD" Requirement SMSFunctionalRequirements ( 1 ) { } } package SMSComponents { import SMSPorts ; import SysADL.types ; import SMSConnectors ; component def SwimmingPoolSystemCP { }
	component def TotemCP { ports : userAuth : AuthInputIPT ; actionRequests : UserActionOPT ; selectedTraining : TrainingDetailsOPT ; displayMessages : DisplayUpdateIPT ; configuration { } } boundary
	component def SensorCP { ports : triggerEvent : SensorTriggerOPT ; }
	component def SensorMicrocontrollerCP { ports : rawSensorData : RawSensorDataIPT ; sensorControl : SensorStatusIPT ; processedExercise : ProcessedExerciseDataOPT ; }
	component def HubCP { ports : totemData : TotemDataIPT ; exerciseData : ExerciseDataIPT ; cameraFeed : CameraDataIPT ; realtimeDisplay : RealtimeDisplayOPT ; cloudUpload : CloudUploadOPT ; configuration { } } boundary
	component def ElectronicScoreboardCP { ports : displayInfo : DisplayInfoIPT ; } boundary
	component def CameraCP { ports : videoOutput : VideoOutputOPT ; } } package SMSConnectors { import SMSPorts ; connector def TotemToHubDataCN { participants : ~ source : TrainingDetailsOPT ; ~ destination : TotemDataIPT ; flows : TrainingDetails from source to destination } connector def SensorToMicrocontrollerEventCN { participants : ~ source : SensorTriggerOPT ; ~ destination : RawSensorDataIPT ; flows : SensorEvent from source to destination } connector def MicrocontrollerToHubExerciseCN { participants : ~ source : ProcessedExerciseDataOPT ; ~ destination : ExerciseDataIPT ; flows : ExerciseRecord from source to destination } connector def CameraToHubVideoCN { participants : ~ source : VideoOutputOPT ; ~ destination : CameraDataIPT ; flows : VideoFeedData from source to destination } connector def HubToPlacarRealtimeCN { participants : ~ source : RealtimeDisplayOPT ; ~ destination : DisplayInfoIPT ; flows : RealtimeDisplayData from source to destination } connector def HubToCloudUploadCN { participants : ~ source : CloudUploadOPT ; } } package SMSPorts { import SysADL.types ; port def AuthInputIPT { flow in TrainingAction } port def UserActionOPT { flow out TrainingDetails } port def TrainingDetailsOPT { flow out TrainingDetails } port def DisplayUpdateIPT { flow in String } port def SensorTriggerOPT { flow out SensorEvent } port def RawSensorDataIPT { flow in SensorEvent } port def ProcessedExerciseDataOPT { flow out ExerciseRecord } port def SensorStatusIPT { flow in SensorStatus } port def TotemDataIPT { flow in TrainingDetails } port def ExerciseDataIPT { flow in ExerciseRecord } port def CameraDataIPT { flow in VideoFeedData } port def RealtimeDisplayOPT { flow out RealtimeDisplayData } port def CloudUploadOPT { flow out TrainingSessionLog } port def DisplayInfoIPT { flow in RealtimeDisplayData } port def VideoOutputOPT { flow out VideoFeedData } }