Model SysADLModel ; 
package SysADL.types { 
	value type Int { } 
	value type Boolean { } 
	value type String { } 
	value type Void { } 
	value type Real { }
dimension Time unit Millisecond { dimension = Time } value type LapTime { unit = Millisecond dimension = Time } enum AuthenticationMethod { QRCode , Manual } enum SensorStatus { Active , Inactive } enum EventType { Started , Finished }  datatype AthleteInfo { attributes :  id : String ; name : String ; } datatype TrainingDetails { attributes : athleteId : String ; trainingId : String ; trainingName : String ; laneId : String ; } datatype SensorEvent { attributes : sensorId : String ; eventType : EventType ; timestamp : Real ; laneId : String ; } enum TrainingAction { Login , SelectTraining , SelectLane , StartTraining , EndTraining } datatype ExerciseRecord { attributes : athleteId : String ; trainingId : String ; exerciseNumber : Int ; laneId : String ; startTime : Real ; endTime : Real ; duration : LapTime ; } datatype RealtimeDisplayData { attributes : athleteName : String ; lapTime : LapTime ; laneId : String ; overallRank : Int ; } datatype VideoFeedData { attributes : cameraId : String ; timestamp : Real ; videoSegment : String ; laneId : String ; } datatype TrainingSessionLog { attributes : sessionId : String ; athleteInfo : AthleteInfo ; trainingDetails : TrainingDetails ; sessionStartTime : Real ; sessionEndTime : Real ; exerciseRecords : ExerciseRecord ; videoReferences : VideoFeedData ; } datatype QRCodeDisplayData { attributes : qrValue : String ; displayDuration : Real ; } datatype LoginRequestData { attributes : method : AuthenticationMethod ; manualEntry : String ; requestQRCode : Boolean ; } datatype LoginConfirmationData { attributes : success : Boolean ; athleteInfo : AthleteInfo ; message : String ; redirectPage : String ; } } Requirement SMSRequirements ( 0 ) { text = "The System must satisfy both Functional and Non-Functional Requirements" } Requirement SMSNonFunctionalrequirements ( 2 ) { text = "" } Requirement UserManagementFR ( 1.1 ) { text = "User CRUD" Requirement SMSFunctionalRequirements ( 1 ) { } } package SMSComponents { import SMSPorts ; import SysADL.types ; import SMSConnectors ; component def SwimmingPoolSystemCP { configuration { components : TotemCP : TotemCP { using ports : userAuth : LoginConfirmationIPT ; actionRequests : UserActionOPT ; selectedTraining : TrainingDetailsOPT ; displayMessages : DisplayUpdateIPT ; qrCodeData : QRCodeDisplayOPT ; loginRequest : LoginRequestOPT ; } HubCP : HubCP { using ports : totemData : TotemDataIPT ; exerciseData : ExerciseDataIPT ; cameraFeed : CameraDataIPT ; realtimeDisplay : RealtimeDisplayOPT ; cloudUpload : CloudUploadOPT ; totemLoginRequest : LoginRequestIPT ; totemQRCodeData : QRCodeForDisplayIPT ; cloudAuthResponse : AuthResponseIPT ; totemLoginConfirmation : LoginConfirmationOPT ; } SensorCP : SensorCP { using ports : triggerEvent : SensorTriggerOPT ; } SensorMicrocontrollerCP : SensorMicrocontrollerCP { using ports : rawSensorData : RawSensorDataIPT ; sensorControl : SensorStatusIPT ; processedExercise : ProcessedExerciseDataOPT ; } CameraCP : CameraCP { using ports : videoOutput : VideoOutputOPT ; } ElectronicScoreboardCP : ElectronicScoreboardCP { using ports : displayInfo : DisplayInfoIPT ; } connectors : totemToHubLoginRequestCN : TotemToHubLoginRequestCN bindings loginRequest = totemLoginRequest ; totemToHubQRCodeDisplayCN : TotemToHubQRCodeDisplayCN bindings qrCodeData = totemQRCodeData ; totemToHubDataCN : TotemToHubDataCN bindings selectedTraining = totemData ;  sensorToMicrocontrollerEventCN : SensorToMicrocontrollerEventCN bindings triggerEvent = rawSensorData ; microcontrollerToHubExerciseCN : MicrocontrollerToHubExerciseCN bindings processedExercise = exerciseData ; cameraToHubVideoCN : CameraToHubVideoCN bindings videoOutput = cameraFeed ; hubToPlacarRealtimeCN : HubToPlacarRealtimeCN bindings realtimeDisplay = displayInfo ; hubToTotemLoginConfirmationCN : HubToTotemLoginConfirmationCN bindings totemLoginConfirmation = userAuth ; } }
	component def TotemCP { ports : userAuth : LoginConfirmationIPT ; actionRequests : UserActionOPT ; selectedTraining : TrainingDetailsOPT ; displayMessages : DisplayUpdateIPT ; qrCodeData : QRCodeDisplayOPT ; loginRequest : LoginRequestOPT ; configuration { components : DisplayCP : DisplayCP { using ports : displayInput : DisplayMessageIPT ; touchOutput : UserActionOPT ; } TotemMicrocontrollerCP : TotemMicrocontrollerCP { using ports : authInput : LoginConfirmationIPT ; displayOutput : DisplayMessageOPT ; userActionOutput : UserActionOPT ; trainingDetailsOutput : TrainingDetailsOPT ; externalMessageInput : ReceiveExternalMessageIPT ; userInterfaceInput : UserActionOPT ; loginRequestOutput : LoginRequestOPT ; qrCodeOutput : QRCodeDisplayOPT ; } connectors : microToDisplayMessageCN : MicroControllerToDisplayMessagesCN bindings displayOutput = displayInput ; displayToMicroCommandsCN : DisplayToMicroControllerCommandsCN bindings touchOutput = userInterfaceInput ; delegations : authInput to userAuth externalMessageInput to displayMessages userActionOutput to actionRequests loginRequestOutput to loginRequest qrCodeOutput to qrCodeData trainingDetailsOutput to selectedTraining } } boundary
	component def SensorCP { ports : triggerEvent : SensorTriggerOPT ; }
	component def SensorMicrocontrollerCP { ports : rawSensorData : RawSensorDataIPT ; sensorControl : SensorStatusIPT ; processedExercise : ProcessedExerciseDataOPT ; }
	component def HubCP { ports : totemData : TotemDataIPT ; exerciseData : ExerciseDataIPT ; cameraFeed : CameraDataIPT ; realtimeDisplay : RealtimeDisplayOPT ; cloudUpload : CloudUploadOPT ; totemLoginRequest : LoginRequestIPT ; totemQRCodeData : QRCodeForDisplayIPT ; cloudAuthResponse : AuthResponseIPT ; totemLoginConfirmation : LoginConfirmationOPT ; configuration { } } boundary
	component def ElectronicScoreboardCP { ports : displayInfo : DisplayInfoIPT ; } boundary
	component def CameraCP { ports : videoOutput : VideoOutputOPT ; }
	component def TotemMicrocontrollerCP { ports : authInput : LoginConfirmationIPT ; displayOutput : DisplayMessageOPT ; userActionOutput : UserActionOPT ; trainingDetailsOutput : TrainingDetailsOPT ; externalMessageInput : ReceiveExternalMessageIPT ; userInterfaceInput : UserActionIPT ; loginRequestOutput : LoginRequestOPT ; qrCodeOutput : QRCodeDisplayOPT ; }
	component def DisplayCP { ports : displayInput : DisplayMessageIPT ; touchOutput : UserActionOPT ; } } package SMSConnectors { import SMSPorts ; connector def TotemToHubDataCN { participants : ~ source : TrainingDetailsOPT ; ~ destination : TotemDataIPT ; flows : TrainingDetails from source to destination } connector def SensorToMicrocontrollerEventCN { participants : ~ source : SensorTriggerOPT ; ~ destination : RawSensorDataIPT ; flows : SensorEvent from source to destination } connector def MicrocontrollerToHubExerciseCN { participants : ~ source : ProcessedExerciseDataOPT ; ~ destination : ExerciseDataIPT ; flows : ExerciseRecord from source to destination } connector def CameraToHubVideoCN { participants : ~ source : VideoOutputOPT ; ~ destination : CameraDataIPT ; flows : VideoFeedData from source to destination } connector def HubToPlacarRealtimeCN { participants : ~ source : RealtimeDisplayOPT ; ~ destination : DisplayInfoIPT ; flows : RealtimeDisplayData from source to destination } connector def HubToCloudUploadCN { participants : ~ source : CloudUploadOPT ; } connector def TotemToHubLoginRequestCN { participants : ~ source : LoginRequestOPT ; ~ destination : LoginRequestIPT ; flows : LoginRequestData from source to destination } connector def TotemToHubQRCodeDisplayCN { participants : ~ source : QRCodeDisplayOPT ; ~ destination : QRCodeForDisplayIPT ; flows : QRCodeDisplayData from source to destination } connector def HubToCloudAuthRequestCN { participants : ~ source : LoginRequestIPT ; } connector def HubToCloudQRCodeDataCN { participants : ~ source : QRCodeForDisplayIPT ; } connector def CloudToHubAuthResponseCN { participants : ~ source : AuthResponseIPT ; } connector def HubToTotemLoginConfirmationCN { participants : ~ source : LoginConfirmationOPT ; ~ destination : LoginConfirmationIPT ; flows : LoginConfirmationData from source to destination } connector def DisplayToMicroControllerCommandsCN { participants : ~ source : UserActionOPT ; ~ destination : UserActionIPT ; flows : TrainingAction from source to destination } connector def MicroControllerToDisplayMessagesCN { participants : ~ source : DisplayMessageOPT ; ~ destination : DisplayMessageIPT ; flows : String from source to destination } } package SMSPorts { import SysADL.types ; port def LoginConfirmationIPT { flow in LoginConfirmationData } port def UserActionOPT { flow out TrainingAction } port def TrainingDetailsOPT { flow out TrainingDetails } port def DisplayUpdateIPT { flow in String } port def SensorTriggerOPT { flow out SensorEvent } port def RawSensorDataIPT { flow in SensorEvent } port def ProcessedExerciseDataOPT { flow out ExerciseRecord } port def SensorStatusIPT { flow in SensorStatus } port def TotemDataIPT { flow in TrainingDetails } port def ExerciseDataIPT { flow in ExerciseRecord } port def CameraDataIPT { flow in VideoFeedData } port def RealtimeDisplayOPT { flow out RealtimeDisplayData } port def CloudUploadOPT { flow out TrainingSessionLog } port def DisplayInfoIPT { flow in RealtimeDisplayData } port def VideoOutputOPT { flow out VideoFeedData } port def DisplayMessageOPT { flow out String } port def DisplayMessageIPT { flow in String } port def ReceiveExternalMessageIPT { flow in String } port def QRCodeDisplayOPT { flow out QRCodeDisplayData } port def LoginRequestOPT { flow out LoginRequestData } port def LoginRequestIPT { flow in LoginRequestData } port def QRCodeForDisplayIPT { flow in QRCodeDisplayData } port def AuthResponseIPT { flow in LoginConfirmationData } port def LoginConfirmationOPT { flow out LoginConfirmationData } port def UserActionIPT { flow in TrainingAction } }